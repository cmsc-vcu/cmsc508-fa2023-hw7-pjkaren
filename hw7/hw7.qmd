---
title: Homework 7 - Creating a resume database
author: Pierre-Joseph Karen
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This html document covers a database created to resume information for the employees of a software development company. The database includes tables for people, roles, and skills, and a supertable which connects these 3 entities.




GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-pjkaren.git

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The database designed for your company encapsulates a comprehensive repository of collective skills, certifications, and employee information. It serves as a central hub to manage and identify the skills possessed by individuals, aiding in finding specific skill sets among employees and highlighting skill gaps in particular roles. The database segments information into three main tables: one for skills and certifications, encompassing IDs, names, descriptions, and URLs; another for employees, housing details like employee IDs, names, contact information, LinkedIn profiles, bios, and join dates; and a third for roles, with role IDs, names, and sort IDs for reporting purposes. The database facilitates the association of skills/certifications with employees, allowing multiple skills per employee and tracking acquisition dates, including expected future skill acquisition. Additionally, it maps employees to roles, enabling employees to take on multiple roles and tracking their assignment dates, providing a comprehensive framework to aid your esteemed sensei in enhancing the company's capabilities and propelling its growth.

## Crows-foot diagram

Below is a diagram describing how the five tables in the database are connected. The three main entities in the table are PEOPLE, SKILL, AND ROLE. A PEOPLE entry represents one employee. A SKILL or ROLE entry pertains to either a talent or position held by an employee. Each person can only have one role, but can have many skills. As a result, each person has only one PEOPLEROLES entry and can have many PEOPLESKILLS entry. Both SKILL to PEOPLESKILLS and ROLE to PEOPLEROLES are one-to-many as skills and roles can appear in multiple entries, but each entry only contains one skill or role.

```{mermaid}
%%| echo: false
erDiagram
    PEOPLESKILLS }|--|{ SKILL : has
    PEOPLESKILLS }|--|| PEOPLE : has
    PEOPLEROLES ||--|| PEOPLE : has
    PEOPLEROLES }|--|{ ROLE : has
    
    
    PEOPLE{
        int people_id
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }
    ROLE {
        int role_id
        string role_name
        int sort_priority
    }
    SKILL {
        int skills_id
        string skills_name
        string skills_description
        string skills_tag
        string skills_url
        string skills_time_commitment
    }
    PEOPLESKILLS {
        int ps_id
        int skills_id
        int people_id
        date date_acquired
    }
    PEOPLEROLES {
        int pr_id
        int people_id
        int role_id
        date date_assigned
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe personal information related to each employee, as well as a picture, possible means of contact, and the date they joined the company.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe various talents possessed by employees. While not all professional, the entries contain info on what each talent is, how long an employee has invested in the skill, and a url through which more info can be obtained about the skill.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the various positions within the company. The only associated elements are an id number, the name of the position, and a priority for sorting the elements.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name


```{python}
sql = f"""
SELECT skills_name, skills_tag, skills_description
FROM skills
ORDER BY skills_name;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
SELECT first_name, last_name, email
FROM people
ORDER BY last_name;

"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
sql = f"""
SELECT s.skills_name
FROM skills s
JOIN peopleskills ps ON s.skills_id = ps.skills_id
JOIN people p ON ps.people_id = p.people_id
WHERE p.people_id = 1;

"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
sql = f"""
SELECT DISTINCT p.first_name, p.last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id = 6;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT DISTINCT p.first_name, p.last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
WHERE pr.role_id = 2;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
sql = f"""
SELECT first_name, last_name, email
FROM people
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleskills
    WHERE people.people_id = peopleskills.people_id
);

"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
sql = f"""
SELECT skills_name, skills_tag
FROM skills
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleskills
    WHERE skills.skills_id = peopleskills.skills_id
);
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
sql = f"""
SELECT p.first_name, p.last_name, s.skills_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.role_id AND r.role_name = 'Boss'
LEFT JOIN peopleskills ps ON p.people_id = ps.people_id
LEFT JOIN skills s ON ps.skills_id = s.skills_id;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

```{python}
sql = f"""
SELECT role_id, role_name
FROM roles
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleroles
    WHERE roles.role_id = peopleroles.role_id
);
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

In writing this report, the most challenging portion was making the queries work correctly. I still do not think my queries are all functioning as they should, however I feel comfortable now exploring them and tinkering with them going forward.

